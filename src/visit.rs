use paste::paste;

use crate::ast::token::*;
use crate::ast::*;

macro_rules! visit {
    ($($token_class: ident),*) => {
        paste! {
            pub trait Visit<'ast> {
                $(
                    fn [<visit_ $token_class:snake>](&mut self, inst: &'ast $token_class)  {
                        [<visit_ $token_class:snake>](self, inst)
                    }
                )*
            }
        }
    };
}

visit! {
    Expr,
    Type,
    Item,
    File,

    // Generated by the following method:
    // cargo build 2>&1 1>/dev/null | grep 'no method named `visit_' out | cut -d '`' -f 2 | sed 's|visit||' | sed -E 's/_([a-z])/\U\1/g' | sort | uniq | sed '$!s/$/,/'
    And,
    AndEq,
    Arch,
    ArchItem,
    ArchItemConst,
    ArchItemEntityExpression,
    ArchItemLet,
    ArchItemWhen,
    Arm,
    As,
    AssOp,
    BinOp,
    Block,
    BraceClose,
    BraceOpen,
    BracketClose,
    BracketOpen,
    Caret,
    CaretEq,
    Colon,
    Comma,
    Const,
    Crate,
    Dot,
    DotDot,
    DotDotEq,
    Else,
    Entity,
    EntityFieldValue,
    Enum,
    Eq,
    EqEq,
    ExprArray,
    ExprAssign,
    ExprBinary,
    ExprBlock,
    ExprCall,
    ExprCast,
    ExprField,
    ExprFor,
    ExprGrouped,
    ExprIf,
    ExprIndex,
    ExprLit,
    ExprMatch,
    ExprMethodCall,
    ExprPath,
    ExprRange,
    ExprRepeat,
    ExprReturn,
    ExprStruct,
    ExprTuple,
    ExprUnary,
    FatArrow,
    Fields,
    FieldsNamed,
    FieldsUnnamed,
    FieldValue,
    Fn,
    FnArg,
    FnArgReceiver,
    FnArgTyped,
    For,
    Ge,
    GenericArgs,
    GenericArg,
    GenericArgType,
    GenericArgExpr,
    GenericArgBinding,
    GenericParam,
    GenericParamConst,
    GenericParamType,
    Generics,
    Gt,
    Ident,
    If,
    Impl,
    ImplItem,
    ImplItemConst,
    ImplItemFn,
    ImplItemType,
    In,
    InOut,
    ItemArch,
    ItemConst,
    ItemEntity,
    ItemEnum,
    ItemFn,
    ItemImpl,
    ItemMod,
    ItemStruct,
    ItemTrait,
    ItemTraitAlias,
    ItemType,
    ItemUse,
    Le,
    Let,
    Lit,
    LitBool,
    LitFloat,
    LitInt,
    LowerSelf,
    Lt,
    Match,
    Member,
    MemberNamed,
    MemberUnnamed,
    Minus,
    MinusEq,
    Mod,
    ModContent,
    ModContentFile,
    ModContentHere,
    NamedField,
    Ne,
    Not,
    Or,
    OrEq,
    Out,
    ParenClose,
    ParenOpen,
    Pat,
    PathSegment,
    PathSep,
    PatIdent,
    PatLit,
    PatPath,
    PatRange,
    PatSlice,
    PatStruct,
    PatTuple,
    PatTupleStruct,
    PatType,
    PatWildcard,
    Percent,
    PercentEq,
    Plus,
    PlusEq,
    Port,
    PortType,
    Pub,
    RangeType,
    RangeTypeClosed,
    RangeTypeHalfOpen,
    RArrow,
    Return,
    Semi,
    Shl,
    ShlEq,
    Shr,
    ShrEq,
    Sig,
    SimplePath,
    Slash,
    SlashEq,
    Star,
    StarEq,
    StarStar,
    StarStarEq,
    Stmt,
    StmtExpr,
    StmtItem,
    StmtLocal,
    Struct,
    StructPatternField,
    StructPatternFieldIdent,
    StructPatternFieldIdentPat,
    StructPatternFieldTuplePat,
    Super,
    TokenType,
    Trait,
    TraitItem,
    TraitItemConst,
    TraitItemFn,
    TraitItemType,
    TypeArray,
    TypeFn,
    TypeInfer,
    TypeParenthesized,
    TypePath,
    TypeSlice,
    TypeTuple,
    Underscore,
    UnnamedField,
    UnOp,
    Use,
    UseTree,
    UseTreeGlob,
    UseTreeGroup,
    UseTreeName,
    UseTreePath,
    UseTreeRename,
    Variant,
    VariantType,
    VariantTypeDiscrim,
    VariantTypeFields,
    VariantTypeUnit,
    Vis,
    VisCrate,
    VisExplicitInherited,
    VisPub,
    VisRestricted,
    VisSuper,
    When,
    Where
}
