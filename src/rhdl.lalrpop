use rug::{Integer as Int, Float};

use std::str::FromStr;

use crate::ast;

grammar;

/// https://doc.rust-lang.org/reference/tokens.html
match {
    "if" => If,
    "else" => Else,
    "as" => As,
    "match" => Match,
    "let" => Let,
    "return" => Return,
    "fn" => Fn,
    "mut" => Mut,
    "in" => In,
    "pub" => Pub,
    "mod" => Mod,
    "struct" => Struct,
    "entity" => Entity,
    "enum" => Enum,
    "const" => Const,
    "impl" => Impl,
    "bag" => Bag,
    "ring" => Ring,
    "crate" => Crate,
    "super" => Super,
    "self" => LowerSelf,
    "Self" => UpperSelf,
    "type" => TokenType,
    "use" => Use,
    "macro" => Macro,
    "for" => For,
    "(break|continue|extern|false|loop|move|mut|ref|static|trait|true|unsafe|where|while|async|await|dyn|abstract|become|box|do|final|override|priv|typeof|unsized|virtual|yield|try|union)" => Keyword,
    "+" => Plus,
    "-" => Minus,
    "*" => Star,
    "**" => StarStar,
    "/" => Slash,
    "%" => Percent,
    "^" => Caret,
    "!" => Not,
    "&" => And,
    "|" => Or,
    "&&" => AndAnd,
    "||" => OrOr,
    "<<" => Shl,
    ">>" => Shr,
    "+=" => PlusEq,
    "-=" => MinusEq,
    "*=" => StarEq,
    "**=" => StarStarEq,
    "/=" => SlashEq,
    "%=" => PercentEq,
    "^=" => CaretEq,
    "&=" => AndEq,
    "|=" => OrEq,
    "<<=" => ShlEq,
    ">>=" => ShrEq,
    "=" => Eq,
    "==" => EqEq,
    "!=" => Ne,
    ">" => Gt,
    "<" => Lt,
    ">=" => Ge,
    "<=" => Le,
    "@" => At,
    "_" => Underscore,
    "." => Dot,
    ".." => DotDot,
    "..=" => DotDotEq,
    "," => Comma,
    ";" => Semi,
    ":" => Colon,
    "::" => PathSep,
    "->" => RArrow,
    "=>" => FatArrow,
    "#" => Pound,
    "$" => Dollar,
    "?" => Question,
    "[" => BracketOpen,
    "]" => BracketClose,
    "(" => ParenOpen,
    ")" => ParenClose,
    "{" => BraceOpen,
    "}" => BraceClose,
    "block" => BlockTok,
    "expr" => ExprTok,
    "ident" => IdentTok,
    "item" => ItemTok,
    "literal" => LitTok,
    "meta" => MetaTok,
    "pat" => PatTok,
    "path" => PathTok,
    "stmt" => StmtTok,
    "tt" => TokenTreeTok,
    "ty" => TypeTok,
    "vis" => VisTok,
    "r#crate" => RawCrate,
    "r#self" => RawLowerSelf,
    "r#Self" => RawUpperSelf,
    "r#super" => RawSuper,
} else {
    r"(?:[a-zA-Z][a-zA-Z0-9_]*|_[a-zA-Z0-9_]+)" => NonKeywordIdentifier,
    r"r#(?:[a-zA-Z][a-zA-Z0-9_]*|_[a-zA-Z0-9_]+)" => RawIdentifier,
    r"(0|[1-9]\d*(?:_\d+)*)" => Integer,
    r"0d\d+(?:_\d+)*" => DecimalInteger,
    r"0x[0-9a-fA-F]+(?:_[0-9a-fA-F]+)*" => HexInteger,
    r"0o[0-7]+(?:_[0-7]+)*" => OctalInteger,
    r"0b[01]+(?:_[01]+)*" => BinaryInteger,
    r"(?:2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36)#[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*" => BaseInteger,
    r"(?:\d+\.\d*|\d*\.\d+|\d+)(?:[eE][-+]?\d+)?f(?:16|32|64|80|128|256)" => FloatingPoint,
}

VecComma<T>: ast::Comma<T> = {
    <mut v:(<T> Comma)*> <e:T?> => {
        if let Some(e) = e {
            v.push(e);
        }
        ast::Comma(v)
    }
};

VecSemi<T>: ast::Semi<T> = {
    <mut v:(<T> Semi)*> <e:T?> => {
        if let Some(e) = e {
            v.push(e);
        }
        ast::Semi(v)
    }
};

VecPipe<T>: ast::Pipe<T> = {
    <mut v:(<T> Or)*> <e:T> => {
        v.push(e);
        ast::Pipe(v)
    }
};

VecAdd<T>: ast::Add<T> = {
    <mut v:(<T> Plus)*> <e:T> => {
        v.push(e);
        ast::Add(v)
    }
};

/// https://doc.rust-lang.org/reference/identifiers.html
Identifier: &'input str = { NonKeywordIdentifier, RawIdentifier };
Ident: ast::Ident = Identifier => ast::Ident {
    inner: <>.to_string()
};

// i.e. 1_234_567_890
Int: Int = Integer => Int::parse(<>).unwrap().into();

pub IntLit: ast::Lit = {
    <val:Int> => ast::Lit::Int { val, suffix: None },

    // i.e. 0d123
    DecimalInteger => {
        const BASE_CHAR: char = 'd';
        const BASE: i32 = 10;
        ast::Lit::Int {
            val: Int::parse_radix(&<>.split(BASE_CHAR).nth(1).unwrap(), BASE).unwrap().into(),
            suffix: None,
        }
    },

    // i.e. 0xC0FFEE_CAFE
    HexInteger => {
        const BASE_CHAR: char = 'x';
        const BASE: i32 = 16;
        ast::Lit::Int {
            val: Int::parse_radix(&<>.split(BASE_CHAR).nth(1).unwrap(), BASE).unwrap().into(),
            suffix: None,
        }
    },

    // i.e. 0o72
    OctalInteger => {
        const BASE_CHAR: char = 'o';
        const BASE: i32 = 8;
        ast::Lit::Int {
            val: Int::parse_radix(&<>.split(BASE_CHAR).nth(1).unwrap(), BASE).unwrap().into(),
            suffix: None,
        }
    },

    // i.e. 0b00110010_00101011_00110010_00111101_00110101
    BinaryInteger => {
        const BASE_CHAR: char = 'b';
        const BASE: i32 = 2;
        ast::Lit::Int {
            val: Int::parse_radix(&<>.split(BASE_CHAR).nth(1).unwrap(), BASE).unwrap().into(),
            suffix: None,
        }
    },

    // i.e. 36#HI, an Int in base 36
    BaseInteger => {
        const BASE_CHAR: char = '#';
        let base = <>.split(BASE_CHAR).next().map(i32::from_str).unwrap().unwrap();
        ast::Lit::Int {
            val: Int::parse_radix(&<>.split(BASE_CHAR).nth(1).unwrap(), base).unwrap().into(),
            suffix: None,
        }
    },
};

pub Float: ast::Lit = FloatingPoint => {
    let format = <>.split('f').nth(1).map(usize::from_str).unwrap().unwrap();
    let precision = match format {
        16 => 11,
        32 => 24,
        64 => 53,
        80 => 64,
        128 => 113,
        256 => 237,
        _ => unreachable!()
    };
    let float = Float::parse(<>.split('f').next().unwrap()).unwrap();
    ast::Lit::Float {
        val: Float::with_val(precision, float),
        suffix: None,
    }
};

Lit: ast::Lit = {
    IntLit,
    Float,
};

/// https://doc.rust-lang.org/reference/paths.html#simple-paths
Path: ast::SimplePath = {
    <leading_colon:PathSep?> <path:(<PathSegment> PathSep)*> <final_path:PathSegment> => {
        let mut v = path;
        v.push(final_path);
        ast::SimplePath {
            leading_colon: leading_colon.map(|_| ()),
            segments: v,
        }
    }
};

PathSegment: ast::Ident = {
    Identifier => ast::Ident { inner: <>.to_string() },
    LowerSelf => ast::Ident { inner: <>.to_string() },
    Super => ast::Ident { inner: <>.to_string() },
    Crate => ast::Ident { inner: <>.to_string() },
};

/// https://doc.rust-lang.org/reference/visibility-and-privacy.html
Visibility: ast::Vis = {
    Pub => ast::Vis::Pub,
    Pub ParenOpen Super ParenClose => ast::Vis::Pub,
    Pub ParenOpen LowerSelf ParenClose => ast::Vis::Inherited,
    Pub ParenOpen Crate ParenClose => ast::Vis::Crate,
    Pub ParenOpen In <Path> ParenClose => ast::Vis::Restricted(<>),
};

/// https://doc.rust-lang.org/reference/expressions/literal-expr.html
LiteralExpression: ast::Expr = Lit => ast::Expr::Lit(<>);
/// https://doc.rust-lang.org/reference/expressions/path-expr.html
PathInExpression: ast::SimplePath = Path;

/// https://doc.rust-lang.org/reference/expressions/block-expr.html
BlockExpression: ast::Expr = Block => ast::Expr::Block(<>);

Block: ast::Block = BraceOpen <v:Statements?> BraceClose => ast::Block(v.unwrap_or_default());

/// https://doc.rust-lang.org/reference/statements.html
Statement: ast::Stmt = {
    /// https://doc.rust-lang.org/reference/statements.html#item-declarations
    // Item => ast::Stmt::Item(<>),
    /// https://doc.rust-lang.org/reference/statements.html#let-statements
    Let <pat:Pat> <ty:(Colon <Type>)?> <expr:(Eq <Expr>)?> Semi => ast::Stmt::Local(pat, ty, expr),
    /// https://doc.rust-lang.org/reference/statements.html#expression-statements
    <expr:ExprStmt> Semi => ast::Stmt::Expr(expr, true),
    <expr:ExprWithBlock> <semi:Semi?> => ast::Stmt::Expr(expr, semi.is_some()),
};

/// https://doc.rust-lang.org/reference/expressions/block-expr.html
Statements: Vec<ast::Stmt> = {
    <Statement+>,
    <mut v:Statement+> <e:ExprStmt> => {
        v.push(ast::Stmt::Expr(e, false));
        v
    },
    ExprStmt => vec![ast::Stmt::Expr(<>, false)],
};

/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#negation-operators
Unary: ast::Expr = {
    Minus <expr:ExprWithoutBlockOrOperator> => ast::Expr::Unary(ast::UnOp::Neg, Box::new(expr)),
    Minus <expr:ExprWithBlock> => ast::Expr::Unary(ast::UnOp::Neg, Box::new(expr)),

    Not <expr:ExprWithoutBlockOrOperator> => ast::Expr::Unary(ast::UnOp::Not, Box::new(expr)),
    Not <expr:ExprWithBlock> => ast::Expr::Unary(ast::UnOp::Not, Box::new(expr)),

    ExprWithoutBlockOrOperator,
};

/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions
Cast: ast::Expr = {
    <expr:Unary> As <ty:Type> => ast::Expr::Cast(Box::new(expr), Box::new(ty)),
    <expr:ExprWithBlock> As <ty:Type> => ast::Expr::Cast(Box::new(expr), Box::new(ty)),

    Unary,
};

Arith0: ast::Expr = {
    <l:Arith0> StarStar <r:Cast> => ast::Expr::Binary(Box::new(l), ast::BinOp::Exp, Box::new(r)),
    <l:Arith0> StarStar <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Exp, Box::new(r)),

    Cast,
};

/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators
Arith1: ast::Expr = {
    <l:Arith1> Slash <r:Arith0> => ast::Expr::Binary(Box::new(l), ast::BinOp::Div, Box::new(r)),
    <l:Arith1> Slash <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Div, Box::new(r)),

    <l:Arith1> Percent <r:Arith0> => ast::Expr::Binary(Box::new(l), ast::BinOp::Rem, Box::new(r)),
    <l:Arith1> Percent <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Rem, Box::new(r)),

    <l:Arith1> Star <r:Arith0> => ast::Expr::Binary(Box::new(l), ast::BinOp::Mul, Box::new(r)),
    <l:Arith1> Star <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Mul, Box::new(r)),

    Arith0,
};

/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators
Arith2: ast::Expr = {
    <l:Arith2> Plus <r:Arith1> => ast::Expr::Binary(Box::new(l), ast::BinOp::Add, Box::new(r)),
    <l:Arith2> Plus <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Add, Box::new(r)),

    <l:Arith2> Minus <r:Arith1> => ast::Expr::Binary(Box::new(l), ast::BinOp::Sub, Box::new(r)),
    <l:Arith2> Minus <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Sub, Box::new(r)),

    Arith1,
};

/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators
Bin0: ast::Expr = {
    <l:Bin0> Shr <r:Arith2> => ast::Expr::Binary(Box::new(l), ast::BinOp::Shr, Box::new(r)),
    <l:Bin0> Shr <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Shr, Box::new(r)),

    <l:Bin0> Shl <r:Arith2> => ast::Expr::Binary(Box::new(l), ast::BinOp::Shl, Box::new(r)),
    <l:Bin0> Shl <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Shl, Box::new(r)),

    Arith2,
};

/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators
Bin1: ast::Expr = {
    <l:Bin1> And <r:Bin0> => ast::Expr::Binary(Box::new(l), ast::BinOp::BitAnd, Box::new(r)),
    <l:Bin1> And <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::BitAnd, Box::new(r)),

    Bin0,
};

/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators
Bin2: ast::Expr = {
    <l:Bin2> Caret <r:Bin1> => ast::Expr::Binary(Box::new(l), ast::BinOp::BitXor, Box::new(r)),
    <l:Bin2> Caret <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::BitXor, Box::new(r)),

    Bin1,
};

/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators
Bin3: ast::Expr = {
    <l:Bin3> Or <r:Bin2> => ast::Expr::Binary(Box::new(l), ast::BinOp::BitOr, Box::new(r)),
    <l:Bin3> Or <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::BitOr, Box::new(r)),

    Bin2,
};

/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#comparison-operators
ComparisonExpression: ast::Expr = {
    <l:Bin3> EqEq <r:Bin3> => ast::Expr::Binary(Box::new(l), ast::BinOp::Eq, Box::new(r)),
    <l:Bin3> EqEq <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Eq, Box::new(r)),

    <l:Bin3> Ne <r:Bin3> => ast::Expr::Binary(Box::new(l), ast::BinOp::Ne, Box::new(r)),
    <l:Bin3> Ne <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Ne, Box::new(r)),

    <l:Bin3> Lt <r:Bin3> => ast::Expr::Binary(Box::new(l), ast::BinOp::Lt, Box::new(r)),
    <l:Bin3> Lt <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Lt, Box::new(r)),

    <l:Bin3> Le <r:Bin3> => ast::Expr::Binary(Box::new(l), ast::BinOp::Le, Box::new(r)),
    <l:Bin3> Le <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Le, Box::new(r)),

    <l:Bin3> Gt <r:Bin3> => ast::Expr::Binary(Box::new(l), ast::BinOp::Gt, Box::new(r)),
    <l:Bin3> Gt <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Gt, Box::new(r)),

    <l:Bin3> Ge <r:Bin3> => ast::Expr::Binary(Box::new(l), ast::BinOp::Ge, Box::new(r)),
    <l:Bin3> Ge <r:ExprWithBlock> => ast::Expr::Binary(Box::new(l), ast::BinOp::Ge, Box::new(r)),
    Bin3,
};

/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#assignment-expressions
/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#compound-assignment-expressions
AssignExpression: ast::Expr = {
    <l:ComparisonExpression> Eq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::Eq, Box::new(r)),
    <l:ComparisonExpression> Eq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::Eq, Box::new(r)),

    <l:ComparisonExpression> PlusEq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::AddEq, Box::new(r)),
    <l:ComparisonExpression> PlusEq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::AddEq, Box::new(r)),

    <l:ComparisonExpression> MinusEq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::SubEq, Box::new(r)),
    <l:ComparisonExpression> MinusEq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::SubEq, Box::new(r)),

    <l:ComparisonExpression> StarEq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::MulEq, Box::new(r)),
    <l:ComparisonExpression> StarEq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::MulEq, Box::new(r)),

    <l:ComparisonExpression> StarStarEq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::ExpEq, Box::new(r)),
    <l:ComparisonExpression> StarStarEq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::ExpEq, Box::new(r)),

    <l:ComparisonExpression> SlashEq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::DivEq, Box::new(r)),
    <l:ComparisonExpression> SlashEq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::DivEq, Box::new(r)),

    <l:ComparisonExpression> PercentEq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::RemEq, Box::new(r)),
    <l:ComparisonExpression> PercentEq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::RemEq, Box::new(r)),

    <l:ComparisonExpression> AndEq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::BitAndEq, Box::new(r)),
    <l:ComparisonExpression> AndEq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::BitAndEq, Box::new(r)),

    <l:ComparisonExpression> OrEq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::BitOrEq, Box::new(r)),
    <l:ComparisonExpression> OrEq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::BitOrEq, Box::new(r)),
    
    <l:ComparisonExpression> CaretEq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::BitXorEq, Box::new(r)),
    <l:ComparisonExpression> CaretEq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::BitXorEq, Box::new(r)),

    <l:ComparisonExpression> ShlEq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::ShlEq, Box::new(r)),
    <l:ComparisonExpression> ShlEq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::ShlEq, Box::new(r)),

    <l:ComparisonExpression> ShrEq <r:ComparisonExpression> => ast::Expr::Assign(Box::new(l), ast::AssOp::ShrEq, Box::new(r)),
    <l:ComparisonExpression> ShrEq <r:ExprWithBlock> => ast::Expr::Assign(Box::new(l), ast::AssOp::ShrEq, Box::new(r)),

    ComparisonExpression,
};

/// https://doc.rust-lang.org/reference/expressions/grouped-expr.html
GroupedExpression: ast::Expr = ParenOpen <Expr> ParenClose;

/// https://doc.rust-lang.org/reference/expressions/array-expr.html#array-expressions
ArrayExpression: ast::Expr = {
    BracketOpen <val:Expr> Semi <repeat:Expr> BracketClose => ast::Expr::Repeat(Box::new(val), Box::new(repeat)),
    BracketOpen <VecComma<Expr>> BracketClose => ast::Expr::Array(<>),
};

/// https://doc.rust-lang.org/reference/expressions/array-expr.html#array-and-slice-indexing-expressions
IndexExpression: ast::Expr = <on:ExprWithoutBlockOrOperator> BracketOpen <index:Expr> BracketClose => ast::Expr::Index(Box::new(on), Box::new(index));

/// https://doc.rust-lang.org/reference/expressions/tuple-expr.html#tuple-expressions
TupleExpression: ast::Expr = ParenOpen <TupleElements?> ParenClose => ast::Expr::Tuple(ast::Comma(<>.unwrap_or_default()));
TupleElements: Vec<ast::Expr> = <mut v:(<Expr> Comma)+> <e:Expr?> => {
    if let Some(e) = e {
        v.push(e);
    }
    v
};

/// https://doc.rust-lang.org/reference/expressions/tuple-expr.html#tuple-indexing-expressions
TupleIndexingExpression: ast::Expr = {
    <base:ExprWithBlock> Dot <unnamed:Int> => ast::Expr::Field(Box::new(base), ast::Member::Unnamed(unnamed)),
    <base:ExprWithoutBlockOrOperator> Dot <unnamed:Int> => ast::Expr::Field(Box::new(base), ast::Member::Unnamed(unnamed)),
};

/// https://doc.rust-lang.org/reference/expressions/struct-expr.html#struct-expressions
StructExpression: ast::Expr = {
    <path:PathInExpression> BraceOpen <first:FieldValue> <mut rest:(Comma <FieldValue>)*> <base:((Comma DotDot <Expr>)? Comma?)> BraceClose => {
        let mut fields = vec![first];
        fields.append(&mut rest);
        ast::Expr::Struct(path, fields.into(), base.0.map(Box::new))
    },
    <path:PathInExpression> BraceOpen <base:(DotDot <Expr> Comma?)> BraceClose => {
        ast::Expr::Struct(path, vec![].into(), Some(Box::new(base)))
    },
    <path:PathInExpression> BraceOpen BraceClose => {
        ast::Expr::Struct(path, vec![].into(), None)
    },
};

FieldValue: ast::FieldValue = {
    <named:Ident> Colon <expr:Expr> => ast::FieldValue { member: ast::Member::Named(named), expr: Some(expr), },
    <unnamed:Int> Colon <expr:Expr> => ast::FieldValue { member: ast::Member::Unnamed(unnamed), expr: Some(expr), },
    <named:Ident> => ast::FieldValue { member: ast::Member::Named(named.clone()), expr: None, },
};

/// https://doc.rust-lang.org/reference/expressions/call-expr.html
CallExpression: ast::Expr = <func:ExprWithoutFieldOrBlock> ParenOpen <args:VecComma<Expr>> ParenClose => ast::Expr::Call(Box::new(func), args);

/// https://doc.rust-lang.org/reference/expressions/method-call-expr.html
MethodCallExpression: ast::Expr = {
    // TODO: should blocks be allowed for method calls?
    <receiver:ExprWithBlock> Dot <method:Ident> ParenOpen <args:VecComma<Expr>> ParenClose => ast::Expr::MethodCall(Box::new(receiver), method, args),
    <receiver:ExprWithoutBlockOrOperator> Dot <method:Ident> ParenOpen <args:VecComma<Expr>> ParenClose => ast::Expr::MethodCall(Box::new(receiver), method, args),
};

/// https://doc.rust-lang.org/reference/expressions/field-expr.html
FieldExpression: ast::Expr = {
    <base:ExprWithBlock> Dot <named:Ident> => ast::Expr::Field(Box::new(base), ast::Member::Named(named)),
    <base:ExprWithoutBlockOrOperator> Dot <named:Ident> => ast::Expr::Field(Box::new(base), ast::Member::Named(named)),
};

// todo: closure expression

/// https://doc.rust-lang.org/reference/expressions/range-expr.html
RangeExpression: ast::Expr = {
    <l:LiteralExpression?> DotDot <r:LiteralExpression?> => ast::Expr::Range(l.map(|l| Box::new(l)), r.map(|r| Box::new(r)), false),
    <l:LiteralExpression?> DotDotEq <r:LiteralExpression> => ast::Expr::Range(l.map(|l| Box::new(l)), Some(Box::new(r)), true),
};

// todo: if let expression
/// https://doc.rust-lang.org/reference/expressions/if-expr.html
IfExpression: ast::Expr = {
    <c:CondIf> <b:Block> <els:(Else <IfExpression>)> => ast::Expr::If(Box::new(c), b, Some(Box::new(els))),
    <c:CondIf> <b:Block> <els:(Else <BlockExpression>)?> => ast::Expr::If(Box::new(c), b, els.map(Box::new)),
};

CondIf: ast::Expr = If <ExprIf>;

/// https://doc.rust-lang.org/reference/expressions/match-expr.html
MatchExpression: ast::Expr = Match <e:ExprIf> BraceOpen <arms:VecComma<MatchArm>> BraceClose => ast::Expr::Match(Box::new(e), arms);

MatchArm: ast::Arm = {
    <pat:Pat> <guard:CondIf?> FatArrow <body:Expr> => ast::Arm {
        pat,
        guard,
        body,
    },
};

/// https://doc.rust-lang.org/reference/expressions/return-expr.html
ReturnExpression: ast::Expr = Return <Expr?> => ast::Expr::Return(<>.map(Box::new));

ExprWithoutFieldOrBlock: ast::Expr = {
    LiteralExpression,
    PathInExpression => ast::Expr::Path(<>),
    GroupedExpression,
    ArrayExpression,
    IndexExpression,
    TupleExpression,
    TupleIndexingExpression,
    CallExpression,
    MethodCallExpression,
    RangeExpression,
};

ExprWithoutBlockOrOperator: ast::Expr = {
    ExprWithoutFieldOrBlock,
    FieldExpression,
};

ExprStmt: ast::Expr = {
    AssignExpression,
    ReturnExpression,
};

/// https://doc.rust-lang.org/reference/expressions.html
ExprWithBlock: ast::Expr = {
    BlockExpression,
    IfExpression,
    MatchExpression,
    // StructExpression,
};

ExprIf: ast::Expr = {
    ComparisonExpression,
    ExprWithBlock,
};

/// https://doc.rust-lang.org/reference/expressions.html
pub Expr: ast::Expr = {
    ComparisonExpression,
    ExprWithBlock,
    // TODO: add struct expression to arithmetic tree in a way that it won't conflict with if/match statements
    StructExpression,
};

/// https://doc.rust-lang.org/reference/patterns.html
pub Pat: ast::Pat = {
    /// https://doc.rust-lang.org/reference/patterns.html#literal-patterns
    Lit => ast::Pat::Lit(<>),
    /// https://doc.rust-lang.org/reference/patterns.html#identifier-patterns and https://doc.rust-lang.org/reference/patterns.html#path-patterns
    PathInExpression => {
        if <>.leading_colon.is_none() && <>.segments.len() == 1 {
            if let Some(segment) = <>.segments.first() {
                ast::Pat::Ident(segment.clone())
            } else {
                ast::Pat::Path(<>)
            }
        } else {
            ast::Pat::Path(<>)
        }
    },
    /// https://doc.rust-lang.org/reference/patterns.html#wildcard-pattern
    Underscore => ast::Pat::Wildcard,
    /// https://doc.rust-lang.org/reference/patterns.html#range-patterns
    <l:RangePatternBound> DotDot <r:RangePatternBound> => ast::Pat::Range(l, false, r),
    <l:RangePatternBound> DotDotEq <r:RangePatternBound> => ast::Pat::Range(l, true, r),
    /// https://doc.rust-lang.org/reference/patterns.html#struct-patterns
    <path:PathInExpression> BraceOpen <elems:StructPatternElements> BraceClose => ast::Pat::Struct(path, elems.0, elems.1),
    /// https://doc.rust-lang.org/reference/patterns.html#tuple-struct-patterns
    <path: PathInExpression> ParenOpen <pats:VecComma<Pat>> ParenClose => ast::Pat::TupleStruct(path, pats, None),
    <path: PathInExpression> ParenOpen <left:(<Pat> Comma)*> DotDot Comma <right:VecComma<Pat>> ParenClose => ast::Pat::TupleStruct(path, ast::Comma(left), Some(right)),
    /// https://doc.rust-lang.org/reference/patterns.html#tuple-patterns and https://doc.rust-lang.org/reference/patterns.html#grouped-patterns
    ParenOpen <VecComma<Pat>> ParenClose => ast::Pat::Tuple(<>, None),
    ParenOpen <left:(<Pat> Comma)*> DotDot Comma <right:VecComma<Pat>> ParenClose => ast::Pat::Tuple(ast::Comma(left), Some(right)),
    /// https://doc.rust-lang.org/reference/patterns.html#slice-patterns
    BraceOpen <VecComma<Pat>> BraceClose => ast::Pat::Slice(<>),

    /// https://doc.rust-lang.org/reference/macros.html#macro-invocation
    // MacroInvocation => ast::Pat::Macro(<>),
};

RangePatternBound: ast::Expr = {
    LiteralExpression,
    PathInExpression => ast::Expr::Path(<>),
};

StructPatternElements: (ast::Comma<ast::StructPatternField>, Option<()>) = {
    DotDot => (ast::Comma(vec![]), Some(())),
    <first:StructPatternField> <mut rest:(Comma <StructPatternField>)*> Comma? => (ast::Comma({ rest.insert(0, first); rest }), None),
    <first:StructPatternField> <mut rest:(Comma <StructPatternField>)*> Comma DotDot => (ast::Comma({ rest.insert(0, first); rest }), Some(())),
};

StructPatternField: ast::StructPatternField = {
    <val:Int> <pat:Pat> => ast::StructPatternField::TuplePat(val, Box::new(pat)),
    <ident:Ident> <pat:Pat> => ast::StructPatternField::IdentPat(ident, Box::new(pat)),
    Ident => ast::StructPatternField::Ident(<>),
};

/// https://doc.rust-lang.org/reference/types.html
pub Type: ast::Type = {
    BracketOpen <ty:Type> Semi <expr:IntLit> BracketClose => ast::Type::Array(Box::new(ty), Box::new(expr)),
    Path => ast::Type::Path(<>),
    Fn ParenOpen <args:VecComma<Type>> ParenClose RArrow <ret:Type> => ast::Type::Fn(args, Some(Box::new(ret))),
    Fn ParenOpen <args:VecComma<Type>> ParenClose => ast::Type::Fn(args, None),
    // MacroInvocation => ast::Type::MacroInvocation(<>),
};
